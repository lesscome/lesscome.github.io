<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ios | lesscome]]></title>
  <link href="http://lesscome.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://lesscome.github.io/"/>
  <updated>2015-01-11T17:47:16+08:00</updated>
  <id>http://lesscome.github.io/</id>
  <author>
    <name><![CDATA[lesscome]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fast Autorelease]]></title>
    <link href="http://lesscome.github.io/blog/2015/01/09/fast-autorelease/"/>
    <updated>2015-01-09T21:30:00+08:00</updated>
    <id>http://lesscome.github.io/blog/2015/01/09/fast-autorelease</id>
    <content type="html"><![CDATA[<p>我们知道ARC的原理是在编译期间智能的插入相关代码来管理内存，“智能插入”对应用层的开发人员来说就像一个黑盒子，隐藏了很多有意思的细节，编译器到底有多智能呢，能做到和手动管理内存一样高效吗？</p>

<p>先看下面这个demo，很简单的例子，test方法返回一个A的实例，main函数里在调用这个对象的go方法。</p>

<pre><code>A * test(){
    A * a = [[A alloc] init];
    return a;
}

int main(int argc, char *argv[])
{
    [test() go];
}
</code></pre>

<p>我们想看下编译器到底添加了哪些代码，一个简单的办法是，打断点后debug查看汇编代码，下面是我在模拟器上运行的汇编代码，用的是x86-64指令集。</p>

<pre><code>testFastARC`test at main.m:11:
0x1043ebbf0:  pushq  %rbp
0x1043ebbf1:  movq   %rsp, %rbp
0x1043ebbf4:  subq   $0x20, %rsp
0x1043ebbf8:  movq   0x521(%rip), %rdi         ; (void *)0x00000001043ec150
0x1043ebbff:  movq   0x502(%rip), %rsi         ; "alloc"
0x1043ebc06:  movq   0x3f3(%rip), %rax         ; (void *)0x0000000104921000: objc_msgSend
0x1043ebc0d:  movq   %rax, -0x18(%rbp)
0x1043ebc11:  callq  *%rax
0x1043ebc13:  movq   0x4f6(%rip), %rsi         ; "init"
0x1043ebc1a:  movq   %rax, %rdi
0x1043ebc1d:  movq   -0x18(%rbp), %rax
0x1043ebc21:  callq  *%rax
0x1043ebc23:  movq   %rax, -0x8(%rbp)
0x1043ebc27:  movq   0x3da(%rip), %rsi         ; (void *)0x000000010491e930: objc_retain
0x1043ebc2e:  movq   %rax, %rdi
0x1043ebc31:  callq  *%rsi
0x1043ebc33:  movl   $0x1, -0xc(%rbp)
0x1043ebc3a:  xorl   %ecx, %ecx
0x1043ebc3c:  movl   %ecx, %esi
0x1043ebc3e:  leaq   -0x8(%rbp), %rdi
0x1043ebc42:  movq   %rax, -0x20(%rbp)
0x1043ebc46:  callq  0x1043ebcbc               ; symbol stub for: objc_storeStrong
0x1043ebc4b:  movq   -0x20(%rbp), %rdi
0x1043ebc4f:  addq   $0x20, %rsp
0x1043ebc53:  popq   %rbp
0x1043ebc54:  jmp    0x1043ebca4               ; symbol stub for: objc_autoreleaseReturnValue

testFastARC`main at main.m:17:
0x1043ebc60:  pushq  %rbp
0x1043ebc61:  movq   %rsp, %rbp
0x1043ebc64:  subq   $0x20, %rsp
0x1043ebc68:  movl   %edi, -0x4(%rbp)
0x1043ebc6b:  movq   %rsi, -0x10(%rbp)
0x1043ebc6f:  callq  0x1043ebbf0               ; test at main.m:11
0x1043ebc74:  movq   %rax, %rdi
0x1043ebc77:  callq  0x1043ebcb6               ; symbol stub for: objc_retainAutoreleasedReturnValue
0x1043ebc7c:  movq   0x495(%rip), %rsi         ; "go"
0x1043ebc83:  movq   %rax, %rdi
0x1043ebc86:  movq   %rax, -0x18(%rbp)
0x1043ebc8a:  callq  0x1043ebcaa               ; symbol stub for: objc_msgSend
0x1043ebc8f:  movq   -0x18(%rbp), %rdi
0x1043ebc93:  callq  0x1043ebcb0               ; symbol stub for: objc_release
0x1043ebc98:  movl   $0x0, %eax
0x1043ebc9d:  addq   $0x20, %rsp
0x1043ebca1:  popq   %rbp
0x1043ebca2:  retq  
</code></pre>

<p>在这么一大坨中，只要重点观察callq指令就好，会发现编译器自动添加了一些retain和autorelease等，在翻译回oc代码，基本就是下面这个造型，我在注释里标出了变化的部分。</p>

<pre><code>A * test(){
    A * a = [[A alloc] init];
    return [a autorelease]; //+autorelease
}

int main(int argc, char *argv[])
{
    A * aa = [test() retain]; //+retain
    [aa go];
    [aa release]; //+release
}   
</code></pre>

<p>可以看到，在main函数里，调用go方法之前，先retain，调用完之后马上release，这不是明显的冗余语句吗，因为在这个简单demo里，不可能有其他地方会release掉aa。我想在手动管理内存的情况下，应该没有人会这么写吧。</p>

<p>看到这是不是不想用ARC了，稍等，是时候引出今天的主角了，那就是fast autorelease。看名字就知道这是个关于运行速度的优化，并且优化完的运行速度比手动管理内存还要快。</p>

<p><strong>Fast Autorelease是个运行时的特性，它会在autorelease的方法里动态的检测调用者的代码，如果发现有objc_retainAutoreleasedReturnValue方法，就不再把对象加到autorelease pool里，而是把对象存到线程局部存储里。然后调用方通过objc_retainAutoreleasedReturnValue方法先检查线程局部存储里有没有包含这个对象，如果有则不再retain。</strong>通过这样的优化，上面那段代码实际上在运行时就变成下面这样。</p>

<pre><code>A * test(){
    A * a = [[A alloc] init];
    return a; //-autorelease
}

int main(int argc, char *argv[])
{
    A * aa = test(); //-retain
    [aa go];
    [aa release];
}   
</code></pre>

<p>因为避免了把对象加到autorelease pool的操作，所以理论上这个优化使得用到fast autorelease的代码比MRC的要快。</p>

<p>另外我比较感兴趣的技术是运行时检测将要运行的方法，查了一下，这段代码可以在object-c runtime的开源项目里找到，地址是<a href="http://www.opensource.apple.com/source/objc4/objc4-532/runtime/NSObject.mm">http://www.opensource.apple.com/source/objc4/objc4-532/runtime/NSObject.mm</a>，最关键的两个方法列在下面了，其中__builtin_return_address是得到当前方法的地址，然后去找下面指令的symbol，跟objc_retainAutoreleasedReturnValue比较，这样来判断下面要运行的方法是不是想要的。好了，这就是我所知道的关于Fast Autorelease的细节，从这个特性的角度来看ARC还是很高效的。</p>

<pre><code>- (id)autorelease
__attribute__((aligned(16)))
{
    // no tag check here: tagged pointers DO use fast autoreleasing

#if SUPPORT_RETURN_AUTORELEASE
assert(tls_get_direct(AUTORELEASE_POOL_RECLAIM_KEY) == NULL);

    if (callerAcceptsFastAutorelease(__builtin_return_address(0))) {
        tls_set_direct(AUTORELEASE_POOL_RECLAIM_KEY, self);
        return self;
    }
#endif
    return _objc_rootAutorelease2(self);
}

static bool callerAcceptsFastAutorelease(const void * const ra0)
{
    const uint8_t *ra1 = (const uint8_t *)ra0;
    const uint16_t *ra2;
    const uint32_t *ra4 = (const uint32_t *)ra1;
    const void **sym;

#define PREFER_GOTPCREL 0
#if PREFER_GOTPCREL
    // 48 89 c7    movq  %rax,%rdi
    // ff 15       callq *symbol@GOTPCREL(%rip)
    if (*ra4 != 0xffc78948) {
        return false;
    }
    if (ra1[4] != 0x15) {
        return false;
    }
    ra1 += 3;
#else
    // 48 89 c7    movq  %rax,%rdi
    // e8          callq symbol
    if (*ra4 != 0xe8c78948) {
        return false;
    }
    ra1 += (long)*(const int32_t *)(ra1 + 4) + 8l;
    ra2 = (const uint16_t *)ra1;
    // ff 25       jmpq *symbol@DYLDMAGIC(%rip)
    if (*ra2 != 0x25ff) {
        return false;
    }
#endif
    ra1 += 6l + (long)*(const int32_t *)(ra1 + 2);
    sym = (const void **)ra1;
    if (*sym != objc_retainAutoreleasedReturnValue)
    {
        return false;
    }

    return true;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
